{"version":3,"sources":["components/Toolbar.jsx","components/ProgressIcon.jsx","components/Node.jsx","components/FullNode.jsx","components/Popover.jsx","components/Flow.jsx","utils.js","CampaignProfile.js","FullScreen.js","index.js"],"names":["Toolbar","currentMode","changeMode","className","onClick","ProgressIcon","total","values","icon","percentages","reduce","acc","value","color","label","pct","push","offset","width","height","viewBox","cx","cy","r","fill","stroke","strokeWidth","map","index","strokeDasharray","strokeDashoffset","x","y","dangerouslySetInnerHTML","__html","Node","nodeData","data","stepIcon","node","type","getIcon","phase","toLowerCase","previous","length","position","style","border","backgroundColor","marginTop","flex","display","flexDirection","alignItems","analytics","potentialTarget","justifyContent","fontSize","paddingLeft","title","paddingRight","target","percentOK","final","FullNode","notReachedValue","formatDecimal","parseFloat","toFixed","Box","flexGrow","marginLeft","marginRight","Typography","name","contentName","substring","mt","mb","date","from","to","Grid","container","item","xs","textAlign","padding","TableContainer","Table","size","TableBody","TableRow","TableCell","borderRadius","useStyles","makeStyles","popoverPaper","overflowX","overflowY","boxShadow","opacity","content","top","left","transform","clipPath","Popover","anchor","onClose","classes","open","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","paper","Paper","minWidth","variant","fontWeight","Flow","mode","steps","useState","stepDetails","setStepDetails","nodeTypes","basic","elements","useMemo","flow","dagre","graphlib","Graph","setGraph","rankdir","setDefaultEdgeLabel","forEach","setNode","id","previousId","stepId","setEdge","layout","nodes","i","generateFlow","sourcePosition","targetPosition","concat","count","source","arrowHeadType","labelShowBg","labelBgPadding","labelBgBorderRadius","labelStyle","fontFamily","labelBgStyle","flat","onElementClick","evt","currentTarget","nodesDraggable","nodesConnectable","elementsSelectable","paneMoveable","zoomOnPinch","zoomOnScroll","zoomOnDoubleClick","onBottom","CampaignProfile","FullScreen","App","setMode","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.6099b567.chunk.js","sourcesContent":["const Toolbar = ({ currentMode, changeMode }) => {\n\n  return (\n    <div className=\"toolbar\">\n      { currentMode === 'profile' && (\n        <div className=\"button\" onClick={() => changeMode('fullscreen')}>\n          Export\n        </div>\n      )}\n      { currentMode === 'fullscreen' && (\n        <div className=\"button\" onClick={() => changeMode('profile')}>\n          Close\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Toolbar;","const ProgressIcon = ({\n  total,\n  values,\n  icon,\n}) => {\n  const percentages = values.reduce(\n    (acc, { value, color, label } ) => {\n      const pct = value / total * 100;\n      acc.values.push({\n        value: pct,\n        offset: 100 - acc.total + 25,\n        color,\n        label,\n      });\n      return {\n        values: acc.values,\n        total: acc.total + pct,\n      };\n    },\n    { values: [], total: 0 }\n  );\n\n  return (\n    <svg width={100} height={100} viewBox=\"0 0 40 40\">\n      <circle\n        cx=\"20\"\n        cy=\"20\"\n        r=\"15.91549430918954\"\n        fill=\"transparent\"\n        stroke=\"#cccccc\"\n        strokeWidth={2}\n      />\n      { percentages.values.map(({ value, offset, color, label }, index) => (\n        <circle\n          key={index}\n          cx=\"20\"\n          cy=\"20\"\n          r=\"15.91549430918954\"\n          fill=\"transparent\"\n          strokeWidth={2}\n          stroke={color}\n          strokeDasharray={[value,100-value]}\n          strokeDashoffset={offset}\n        />\n      ))}\n      <text\n        x=\"20\"\n        y=\"26\"\n        dangerouslySetInnerHTML={{ __html: icon}}\n        className=\"stepIcon\"\n      />\n    </svg>\n  );\n};\n\nexport default ProgressIcon;\n","import { Handle }  from 'react-flow-renderer';\n\nimport ProgressIcon from './ProgressIcon';\n\nconst getIcon = (node) => {\n  switch (node.type) {\n    case 'email-1to1':\n      return '&#xf658;';\n    case 'automated-email':\n      return '&#xf674;';\n    case 'sms':\n      return '&#xf7cd;';\n    case 'survey':\n      return '&#xf681;';\n    case 'call':\n      return '&#xf0f0;';\n    case 'event':\n      return '&#xf073;';\n    default: break;\n  };\n}\n\nconst Node = ({ data: nodeData }) => {\n  const stepIcon = getIcon(nodeData);\n  return (\n    <>\n      <div className=\"node-container\">\n        <div className={`node-status node-status-${nodeData.phase.toLowerCase()}`}>\n          { nodeData.phase }\n        </div>\n        { nodeData.previous.length > 0 && (\n          <Handle\n            type=\"target\"\n            position=\"left\"\n            style={{\n              border: '1px solid rgb(152,152,152)',\n              backgroundColor: 'white',\n            }}\n          />\n        )}\n        <div style={{\n            height: '100%',\n            width: '100%',\n            marginTop: 7,\n            flex: 3,\n            display: \"flex\",\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}>\n          <ProgressIcon\n            values={nodeData.data.analytics}\n            total={nodeData.data.potentialTarget}\n            icon={stepIcon}\n          />\n          <div style={{ display: 'flex', flexDirection: 'row', justifyContent: \"space-between\", width: '100%'}}>\n            <div style={{ fontSize: '10px', paddingLeft: 5}} title=\"Target\">\n              <i className=\"fas fa-bullseye\" style={{ color: '#2E86C1', paddingRight: 3}}></i>\n              { nodeData.data.target }\n            </div>\n            <div style={{ fontSize: '10px', paddingRight: 5}} title={ nodeData.data.percentOK?.label }>\n              <i className=\"fas fa-check-circle\" style={{ color: '#2E86C1', paddingRight: 3}}></i>\n              { nodeData.data.percentOK?.value } %\n            </div>\n          </div>\n        </div>\n        { nodeData.final !== true && (\n          <Handle\n            type=\"source\"\n            position=\"right\"\n            style={{ \n              border: '1px solid rgb(152,152,152)',\n              backgroundColor: 'white',\n            }}\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Node;\n","import { Handle }  from 'react-flow-renderer';\nimport {\n  Typography,\n  Box,\n  TableContainer,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n  Grid,\n} from '@material-ui/core';\n\nimport ProgressIcon from './ProgressIcon';\n\nconst getIcon = (node) => {\n  switch (node.type) {\n    case 'email-1to1':\n      return '&#xf658;';\n    case 'automated-email':\n      return '&#xf674;';\n    case 'sms':\n      return '&#xf7cd;';\n    case 'survey':\n      return '&#xf681;';\n    case 'call':\n      return '&#xf0f0;';\n    case 'event':\n      return '&#xf073;';\n    default: break;\n  };\n}\n\nconst FullNode = ({ data: nodeData }) => {\n  const stepIcon = getIcon(nodeData);\n  const notReachedValue = nodeData.data.potentialTarget - nodeData.data.target;\n  const formatDecimal = (value) => +parseFloat(value).toFixed(2);\n  return (\n    <>\n      <div className=\"node-container\">\n        <div className={`node-status node-status-${nodeData.phase.toLowerCase()}`}>\n          { nodeData.phase }\n        </div>\n        { nodeData.previous.length > 0 && (\n          <Handle\n            type=\"target\"\n            position=\"left\"\n            style={{\n              border: '1px solid rgb(152,152,152)',\n              backgroundColor: 'white',\n            }}\n          />\n        )}\n        <div style={{\n            width: '100%',\n            marginTop: 7,\n            display: \"flex\",\n            flexDirection: 'row',\n            alignItems: 'center',\n          }}>\n          <Box flexGrow={1}>\n            <ProgressIcon\n              values={nodeData.data.analytics}\n              total={nodeData.data.potentialTarget}\n              icon={stepIcon}\n            />\n          </Box>\n          <div style={{ marginLeft: 10, marginRight: 10, flexGrow: 3 }}>\n            <Typography style={{ fontSize: '12px', color: \"#666666\" }}>\n              {nodeData.name}\n            </Typography>\n            { !!nodeData.contentName && (\n              <Typography style={{ fontSize: '12px' }} title={nodeData.contentName}>\n                { nodeData.contentName.length > 45 ?  nodeData.contentName.substring(0,45) + '...' : nodeData.contentName }\n              </Typography>\n            )}\n            <Box mt={1} mb={1}>\n              <Typography style={{ fontSize: '12px', color: \"#666666\" }}>\n                Date\n              </Typography>\n              { typeof(nodeData.date) === 'object' && (\n                <Box>\n                  <Typography style={{ fontSize: '12px' }}>\n                    From { nodeData.date.from } to { nodeData.date.to}\n                  </Typography>\n                </Box>\n              )}\n              { typeof(nodeData.date) === 'string' && (\n                <Box>\n                  <Typography style={{ fontSize: '12px' }}>\n                    { nodeData.date }\n                  </Typography>\n                </Box>\n              )}\n            </Box>\n            <Grid container>\n              <Grid item xs={4} style={{ textAlign: \"left\"}}>\n                <Typography style={{ fontSize: '12px', color: \"#666666\" }}>\n                  Potential\n                </Typography>\n                <Typography style={{ fontSize: '13px' }}>\n                  { nodeData.data.potentialTarget }\n                </Typography>\n              </Grid>\n              <Grid item xs={4} style={{ textAlign: \"center\"}}>\n                <Typography style={{ fontSize: '12px', color: \"#666666\" }}>\n                  Target\n                </Typography>\n                <Typography style={{ fontSize: '13px' }}>\n                  { nodeData.data.target }\n                </Typography>\n              </Grid>\n              <Grid item xs={4} style={{ textAlign: \"right\"}}>\n                <Typography style={{ fontSize: '12px', color: \"#666666\" }}>\n                  { nodeData.data.percentOK.label }\n                </Typography>\n                <Typography style={{ fontSize: '13px' }}>\n                  { nodeData.data.percentOK.value } %\n                </Typography>\n              </Grid>\n            </Grid>\n          </div>\n        </div>\n        <Box style={{ width: '98%', padding: 3}}>\n          <TableContainer style={{ width: '100%', marginTop: 10 }}>\n            <Table size=\"small\">\n              <TableBody >\n                {  nodeData.data.analytics.map(({ value, label, color }, index) => (\n                  <TableRow key={index}>\n                    <TableCell style={{ padding: 0}}>\n                      <div style={{\n                        border: `5px solid ${color}`,\n                        borderRadius: 5\n                      }}/>\n                    </TableCell>\n                    <TableCell style={{ fontSize: '10px'}}>{label}</TableCell>\n                    <TableCell style={{ fontSize: '10px', textAlign: 'right'}}>{value}</TableCell>\n                    <TableCell style={{ fontSize: '10px', textAlign: 'right'}}>{formatDecimal(value / nodeData.data.potentialTarget * 100)} %</TableCell>\n                  </TableRow>\n                ))}\n                <TableRow>\n                  <TableCell style={{ padding: 0}}>\n                    <div style={{\n                      border: `5px solid #cccccc`,\n                      borderRadius: 5\n                    }}/>\n                  </TableCell>\n                  <TableCell style={{ fontSize: '10px'}}>Not Reached</TableCell>\n                  <TableCell style={{ fontSize: '10px', textAlign: 'right'}}>{ notReachedValue }</TableCell>\n                  <TableCell style={{ fontSize: '10px', textAlign: 'right'}}>{formatDecimal(notReachedValue / nodeData.data.potentialTarget * 100)} %</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Box>\n        { nodeData.final !== true && (\n          <Handle\n            type=\"source\"\n            position=\"right\"\n            style={{ \n              border: '1px solid rgb(152,152,152)',\n              backgroundColor: 'white',\n            }}\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default FullNode;\n","import {\n  Popover as MuiPopover,\n  Box,\n  Paper,\n  Typography,\n  TableContainer,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n  Grid,\n  makeStyles,\n} from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  popoverPaper: {\n    marginTop: '10px',\n    overflowX: \"unset\",\n    overflowY: \"unset\",\n    width: '310px',\n    \"&::before\": {\n        boxShadow: '20px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 1px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%)',\n        opacity: 0.9,\n        content: '\"\"',\n        position: \"absolute\",\n        top: 0,\n        left: 155,\n        marginTop: '-10px',\n        width: 10,\n        height: 10,\n        backgroundColor: 'white',\n        transform: \"translate(-50%, 50%) rotate(-45deg)\",\n        clipPath: \"polygon(-5px -5px, calc(100% + 5px) -5px, calc(100% + 5px) calc(100% + 5px))\",\n    },\n  }\n});\n\nconst Popover = ({ anchor, onClose, nodeData }) => {\n  const classes = useStyles();\n  if (!nodeData) return (<div></div>);\n  const { data } = nodeData;\n  const notReachedValue = data.data.potentialTarget - data.data.target;\n  \n  const formatDecimal = (value) => +parseFloat(value).toFixed(2);\n  \n  return (\n    <MuiPopover\n      open={anchor !== null}\n      anchorEl={anchor}\n      onClose={onClose}\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'center',\n      }}\n      transformOrigin={{\n        vertical: 'top',\n        horizontal: 'center',\n      }}\n      classes={{\n        paper: classes.popoverPaper,\n      }}\n    >\n      <Paper\n        style={{\n          padding: 10,\n          minWidth: 230,\n          opacity: 0.8,\n        }}\n      >\n        <Box>\n          <Typography variant=\"h6\" title={data.contentName}>\n            { data.name }\n          </Typography>\n        </Box>\n        { typeof(data.date) === 'object' && (\n          <Box mb={1}>\n            <Typography variant=\"body1\">\n              From { data.date.from } to { data.date.to}\n            </Typography>\n          </Box>\n        )}\n        { typeof(data.date) === 'string' && (\n          <Box mb={1}>\n            <Typography variant=\"body1\">\n              { data.date }\n            </Typography>\n          </Box>\n        )}\n        <Box mb={1}>\n          <Grid container>\n            <Grid item xs={4}>\n              <Typography variant=\"body1\" style={{ fontWeight: 'bold', fontSize: '11px' }}>\n                Potential target\n              </Typography>\n              <Typography variant=\"body1\">\n                { data.data.potentialTarget }\n              </Typography>\n            </Grid>\n            <Grid item xs={4} style={{ textAlign: \"center\"}}>\n              <Typography variant=\"body1\" style={{ fontWeight: 'bold', fontSize: '11px' }}>\n                Target\n              </Typography>\n              <Typography variant=\"body1\">\n                { data.data.target }\n              </Typography>\n            </Grid>\n            <Grid item xs={4} style={{ textAlign: \"right\"}}>\n              <Typography variant=\"body1\" style={{ fontWeight: 'bold', fontSize: '11px' }}>\n                { data.data.percentOK.label }\n              </Typography>\n              <Typography variant=\"body1\">\n                { data.data.percentOK.value } %\n              </Typography>\n            </Grid>\n          </Grid>\n        </Box>\n        <Box mt={2}>\n          <Typography variant=\"body1\">\n            Details\n          </Typography>\n        </Box>\n        <TableContainer style={{ marginTop: 10 }}>\n          <Table size=\"small\">\n            <TableBody >\n              { data.data.analytics.map(({ value, label, color }, index) => (\n                <TableRow key={index}>\n                  <TableCell style={{ padding: 0}}>\n                    <div style={{\n                      border: `5px solid ${color}`,\n                      borderRadius: 5\n                    }}/>\n                  </TableCell>\n                  <TableCell>{label}</TableCell>\n                  <TableCell style={{ textAlign: 'right'}}>{value}</TableCell>\n                  <TableCell style={{ textAlign: 'right'}}>{formatDecimal(value / data.data.potentialTarget * 100)} %</TableCell>\n                </TableRow>\n              ))}\n              <TableRow>\n                <TableCell style={{ padding: 0}}>\n                  <div style={{\n                    border: `5px solid #cccccc`,\n                    borderRadius: 5\n                  }}/>\n                </TableCell>\n                <TableCell>Not Reached</TableCell>\n                <TableCell style={{ textAlign: 'right'}}>{ notReachedValue }</TableCell>\n                <TableCell style={{ textAlign: 'right'}}>{formatDecimal(notReachedValue / data.data.potentialTarget * 100)} %</TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Paper>\n    </MuiPopover>\n  );\n};\n\nexport default Popover;\n","import { useState, useMemo } from 'react';\nimport ReactFlow from 'react-flow-renderer';\n\nimport Node from './Node';\nimport FullNode from './FullNode';\nimport Popover from './Popover';\nimport { generateFlow } from '../utils';\n\nconst Flow = ({ mode, steps }) => {\n  const [stepDetails, setStepDetails] = useState(null);\n\n  const nodeTypes = {\n    basic: mode === 'fullscreen' ? FullNode : Node,\n  };\n\n  const elements = useMemo(() => {\n    const width = mode === 'profile' ? 250 : 400;\n    const height = mode === 'profile' ? 140 : 390;\n    const flow = generateFlow(width, height, steps);\n    const elements = flow\n      .map((node) => ({\n        id: `${mode}-${node.id}`,\n        type: 'basic',\n        data: { ...node },\n        position: { x: node.x, y: node.y},\n        sourcePosition: 'right',\n        targetPosition: 'left',\n        className: mode === 'profile' ? 'node' : 'fullnode',\n      }))\n      .concat(\n        steps.map(({ id, previous }) =>\n          previous.map(\n            ({ stepId: previousId, count, label }) => ({\n              id: `${mode}-${id}-${previousId}}`,\n              source: `${mode}-${previousId}`,\n              target: `${mode}-${id}`,\n              arrowHeadType: 'none',\n              style: {\n                strokeWidth: 2,\n                stroke: 'rgb(152,152,152)'\n              },\n              type: 'smoothstep',\n              label: `${label ? label + ': ' : ''}${count}`,\n              labelShowBg: true,\n              labelBgPadding: [10, 5],\n              labelBgBorderRadius: 4,\n              labelStyle: {\n                fontFamily: 'Roboto, sans-serif',\n                fontSize: 15,\n              },\n              labelBgStyle: {\n                fill: 'rgb(217,217,217)',\n                stroke: 'rgb(152,152,152)',\n              },\n            })\n          )\n        ).flat()\n      );\n    return elements;\n  }, [mode, steps]);\n\n  return (\n    <div style={{\n      height: '100%',\n      backgroundColor: '#efefef',\n    }}>\n      <ReactFlow\n        onElementClick={(evt, node) => {\n          if(node.type !== 'smoothstep' && mode === 'profile')\n            setStepDetails({ evt: evt.currentTarget, node });\n        }}\n        nodesDraggable={false}\n        nodesConnectable={false}\n        elementsSelectable={false}\n        paneMoveable={mode === 'fullscreen'}\n        zoomOnPinch={mode === 'fullscreen'}\n        zoomOnScroll={mode === 'fullscreen'}\n        zoomOnDoubleClick={mode === 'fullscreen'}\n        nodeTypes={nodeTypes}\n        elements={elements}\n      />\n      <Popover\n        anchor={stepDetails?.evt || null}\n        onClose={() => setStepDetails(null)}\n        nodeData={stepDetails?.node || null}\n        onBottom={true}\n      />\n    </div>\n  );\n};\n\nexport default Flow;","import dagre from 'dagre';\n\nconst generateFlow = (width, height, data) => {\n  const flow = new dagre.graphlib.Graph();\n  flow.setGraph({\n    rankdir: 'LR',\n  });\n  flow.setDefaultEdgeLabel(() => ({}));\n  // Set nodes\n  data.forEach(\n    (node, index) => {\n      flow.setNode(node.id, {\n        width,\n        height,\n        ...node,\n      });\n    }\n  );\n\n  // Set edges\n  data.forEach(\n    ({ id, previous }) => {\n      previous.forEach(({ stepId: previousId }) => {\n        flow.setEdge(previousId, id);\n      });\n    }\n  );\n\n  dagre.layout(flow);\n  return flow.nodes().map((i) => flow.node(i));\n};\n\nexport {\n  generateFlow,\n};","import Flow from './components/Flow';\n\nconst CampaignProfile = ({ steps })  => {\n  return (\n    <div style={{ height: '100%', backgroundColor: '#efefef' }}>\n      <Flow mode=\"profile\" steps={steps} />\n    </div>\n  );\n};\n\nexport default CampaignProfile;","import Flow from './components/Flow';\n\nconst FullScreen = ({ steps })  => {\n  return (\n    <div style={{ height: '100%', backgroundColor: '#efefef' }}>\n      <Flow mode=\"fullscreen\" steps={steps} />\n    </div>\n  );\n};\n\nexport default FullScreen;","import { StrictMode, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ReactFlowProvider } from \"react-flow-renderer\";\n\nimport Toolbar from './components/Toolbar';\nimport CampaignProfile from \"./CampaignProfile\";\nimport FullScreen from \"./FullScreen\";\nimport \"./styles.css\";\n\nimport steps from './campaign';\n\nconst App = () => {\n  const [mode, setMode] = useState('profile');\n\n  return (\n    <ReactFlowProvider>\n      <Toolbar\n        currentMode={mode}\n        changeMode={setMode}\n      />\n      { mode === 'profile' && (\n        <CampaignProfile steps={steps} />\n      )}\n      { mode === 'fullscreen' && (\n        <FullScreen steps={steps} />\n      )}\n    </ReactFlowProvider>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}